// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generators: Specifies what clients should be generated based on the data model (e.g. Prisma Client)
// The main property provider defines which Prisma Client (language specific) is created - currently, only prisma-client-js is available.
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

// Data sources: Specify the details of the data sources Prisma should connect to (e.g. a PostgreSQL database)
datasource db {
    // provider = "sqlite"
    // url      = "file:./db.sqlite"
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Model: Specifies app models and their relations
// MODEL ATTRIBUTES:
// Every record of a model must be uniquely identifiable: it needs to define at least one of the following attributes per model:
// - @unique: adds unique constraint. Required if model doesn't define an @id/@@id field.
// - @@unique: defines a compound unique constraint. All fields defined as compound key must be required. To retrieve a record by its compound key, use generated field name fieldName1_fieldName2_..._fieldNameN or define custom name.
// - @id: The primary key of the model. Can be annotated with @default(X) to autogenerate an ID, where X can be autoincrement(), cuid() or uuid().
// - @@id: defines composite ID field.

// - @default(value): defines default value for a scalar field. e.g. createdAt  DateTime  @default(now())
// - @@index: defines fields as index. e.g. @@index(fields: [title, author])
// - @relation: defines meta information about the relation. e.g. @relation(fields: [authorId], references: [id]). Required on 1-1 or 1-N relations, with the corresponding relation scalar field.

// MODEL FIELD TYPES:
//  Scalar types: String, Boolean, Int, BigInt, Float, Decimal, DateTime, Json, Bytes
//  Relation types: Model

// REMINDER: due to PlanetScale not supporting foreign key constraints, we need to emulate referential integrity. Every foreign key needs to be indexed to make queries fast enough.

model Subeddit {
    id          String   @id @default(cuid())
    name        String   @unique
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    posts       Post[]
}

model Post {
    id            Int         @id @default(autoincrement())
    title         String      @db.VarChar(255)
    content       String      @db.LongText
    contentType   ContentType @default(Text)
    author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId      String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    subeddit      Subeddit    @relation(fields: [subedditId], references: [id])
    subedditId    String
    comments      Comment[]
    commentsDepth Int         @default(0)
    votes         Vote[]

    @@index(fields: [title])
    @@index([subedditId, authorId])
}

enum ContentType {
    Text
    Image
    Video
}

model Comment {
    id        String    @id @default(cuid())
    content   String    @db.Text
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    post      Post      @relation(fields: [postId], references: [id])
    postId    Int
    parent    Comment?  @relation("CommentTree", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  String?
    children  Comment[] @relation("CommentTree")
    votes     Vote[]

    @@index([postId, authorId, parentId])
}

model Vote {
    id           String       @id @default(cuid())
    author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    post         Post?        @relation(fields: [postId], references: [id])
    postId       Int?
    comment      Comment?     @relation(fields: [commentId], references: [id])
    commentId    String?
    voteType     Int          @db.TinyInt
    voteableType VoteableType

    @@unique([authorId, postId], name: "authorId_postId")
    @@unique([authorId, commentId], name: "authorId_commentId")
    @@index([authorId, postId])
}

enum VoteableType {
    Post
    Comment
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Comment       Comment[]
    Vote          Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
